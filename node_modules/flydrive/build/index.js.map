{"version":3,"sources":["../src/disk.ts","../src/drive_manager.ts","../src/debug.ts","../src/fake_disk.ts"],"sourcesContent":["/*\n * flydrive\n *\n * (c) FlyDrive\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { unlink } from 'node:fs/promises'\nimport { createReadStream } from 'node:fs'\nimport type { Readable } from 'node:stream'\n\nimport * as errors from './errors.js'\nimport { DriveFile } from './driver_file.js'\nimport { KeyNormalizer } from './key_normalizer.js'\nimport { DriveDirectory } from './drive_directory.js'\nimport type {\n  WriteOptions,\n  FileSnapshot,\n  ObjectMetaData,\n  DriverContract,\n  ObjectVisibility,\n  SignedURLOptions,\n} from './types.js'\n\n/**\n * Disk offers a unified API for working with different drivers\n */\nexport class Disk {\n  /**\n   * The normalizer is used to normalize and validate keys\n   */\n  #normalizer = new KeyNormalizer()\n\n  constructor(public driver: DriverContract) {}\n\n  /**\n   * Creates a new instance of the DriveFile. It can be used\n   * to lazily fetch file contents or convert it into a\n   * snapshot for persistence\n   */\n  file(key: string): DriveFile {\n    return new DriveFile(key, this.driver)\n  }\n\n  /**\n   * Creates a new instance of the DriveFile from the snapshot.\n   */\n  fromSnapshot(snapshot: FileSnapshot): DriveFile {\n    return new DriveFile(snapshot.key, this.driver, {\n      contentLength: snapshot.contentLength,\n      etag: snapshot.etag,\n      lastModified: new Date(snapshot.lastModified),\n      contentType: snapshot.contentType,\n    })\n  }\n\n  /**\n   * Check if the file exists. This method cannot check existence\n   * of directories.\n   */\n  exists(key: string): Promise<boolean> {\n    return this.file(key).exists()\n  }\n\n  /**\n   * Returns file contents as a UTF-8 string. Use \"getArrayBuffer\" method\n   * if you need more control over the file contents decoding.\n   */\n  get(key: string): Promise<string> {\n    return this.file(key).get()\n  }\n\n  /**\n   * Returns file contents as a Readable stream.\n   */\n  getStream(key: string): Promise<Readable> {\n    return this.file(key).getStream()\n  }\n\n  /**\n   * Returns file contents as a Uint8Array.\n   */\n  getBytes(key: string): Promise<Uint8Array> {\n    return this.file(key).getBytes()\n  }\n\n  /**\n   * @deprecated\n   * @see {@link Disk.getBytes}\n   */\n  getArrayBuffer(key: string): Promise<Uint8Array> {\n    return this.file(key).getArrayBuffer()\n  }\n\n  /**\n   * Returns metadata of the given file.\n   */\n  getMetaData(key: string): Promise<ObjectMetaData> {\n    return this.file(key).getMetaData()\n  }\n\n  /**\n   * Returns the visibility of the file\n   */\n  getVisibility(key: string): Promise<ObjectVisibility> {\n    return this.file(key).getVisibility()\n  }\n\n  /**\n   * Returns the public URL of the file\n   */\n  getUrl(key: string): Promise<string> {\n    return this.file(key).getUrl()\n  }\n\n  /**\n   * Returns a signed/temporary URL of the file\n   */\n  getSignedUrl(key: string, options?: SignedURLOptions): Promise<string> {\n    return this.file(key).getSignedUrl(options)\n  }\n\n  /**\n   * Update the visibility of the file\n   */\n  async setVisibility(key: string, visibility: ObjectVisibility): Promise<void> {\n    key = this.#normalizer.normalize(key)\n    try {\n      return await this.driver.setVisibility(key, visibility)\n    } catch (error) {\n      throw new errors.E_CANNOT_SET_VISIBILITY([key], { cause: error })\n    }\n  }\n\n  /**\n   * Create new file or update an existing file. In case of an error,\n   * the \"E_CANNOT_WRITE_FILE\" exception is thrown\n   */\n  async put(key: string, contents: string | Uint8Array, options?: WriteOptions): Promise<void> {\n    key = this.#normalizer.normalize(key)\n    try {\n      return await this.driver.put(key, contents, options)\n    } catch (error) {\n      throw new errors.E_CANNOT_WRITE_FILE([key], { cause: error })\n    }\n  }\n\n  /**\n   * Create new file or update an existing file using a Readable Stream\n   * In case of an error, the \"E_CANNOT_WRITE_FILE\" exception is thrown\n   */\n  async putStream(key: string, contents: Readable, options?: WriteOptions) {\n    key = this.#normalizer.normalize(key)\n    try {\n      return await this.driver.putStream(key, contents, options)\n    } catch (error) {\n      throw new errors.E_CANNOT_WRITE_FILE([key], { cause: error })\n    }\n  }\n\n  /**\n   * Copies file from the \"source\" to the \"destination\" within the\n   * same bucket or the root location of local filesystem.\n   *\n   * Use \"copyFromFs\" method to copy files from local filesystem to\n   * a cloud provider\n   */\n  async copy(source: string, destination: string, options?: WriteOptions): Promise<void> {\n    source = this.#normalizer.normalize(source)\n    destination = this.#normalizer.normalize(destination)\n    try {\n      return await this.driver.copy(source, destination, options)\n    } catch (error) {\n      throw new errors.E_CANNOT_COPY_FILE([source, destination], { cause: error })\n    }\n  }\n\n  /**\n   * Copies file from the local filesystem to the cloud provider.\n   */\n  copyFromFs(source: string | URL, destination: string, options?: WriteOptions) {\n    return this.putStream(destination, createReadStream(source), options)\n  }\n\n  /**\n   * Moves file from the \"source\" to the \"destination\" within the\n   * same bucket or the root location of local filesystem.\n   *\n   * Use \"moveFromFs\" method to move files from local filesystem to\n   * a cloud provider\n   */\n  async move(source: string, destination: string, options?: WriteOptions): Promise<void> {\n    source = this.#normalizer.normalize(source)\n    destination = this.#normalizer.normalize(destination)\n    try {\n      return await this.driver.move(source, destination, options)\n    } catch (error) {\n      throw new errors.E_CANNOT_MOVE_FILE([source, destination], { cause: error })\n    }\n  }\n\n  /**\n   * Moves file from the local filesystem to the cloud provider.\n   */\n  async moveFromFs(source: string | URL, destination: string, options?: WriteOptions) {\n    await this.putStream(destination, createReadStream(source), options)\n    await unlink(source)\n  }\n\n  /**\n   * Deletes a file for the given key. Use \"deleteAll\" method to delete\n   * files for a matching folder prefix.\n   */\n  async delete(key: string): Promise<void> {\n    key = this.#normalizer.normalize(key)\n    try {\n      return await this.driver.delete(key)\n    } catch (error) {\n      throw new errors.E_CANNOT_DELETE_FILE([key], { cause: error })\n    }\n  }\n\n  /**\n   * Delete all files matching the given prefix. In case of \"fs\" driver,\n   * the mentioned folder will be deleted.\n   */\n  async deleteAll(prefix?: string): Promise<void> {\n    prefix = prefix && prefix !== '/' ? this.#normalizer.normalize(prefix) : '/'\n    try {\n      return await this.driver.deleteAll(prefix)\n    } catch (error) {\n      throw new errors.E_CANNOT_DELETE_DIRECTORY([prefix], { cause: error })\n    }\n  }\n\n  /**\n   * Returns a list of objects which includes and files and directories.\n   * In case of \"recursive\" listing, no directories are returned.\n   */\n  listAll(\n    prefix?: string,\n    options?: {\n      recursive?: boolean\n      paginationToken?: string\n    }\n  ): Promise<{\n    paginationToken?: string\n    objects: Iterable<DriveFile | DriveDirectory>\n  }> {\n    prefix = prefix && prefix !== '/' ? this.#normalizer.normalize(prefix) : '/'\n    return this.driver.listAll(prefix, options)\n  }\n}\n","/*\n * flydrive\n *\n * (c) FlyDrive\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { RuntimeException } from '@poppinss/utils'\n\nimport debug from './debug.js'\nimport { Disk } from './disk.js'\nimport { FakeDisk } from './fake_disk.js'\nimport { DriveManagerOptions, DriverContract } from './types.js'\n\n/**\n * Drive manager exposes the API to manage Disk instances for multiple\n * services. Also, it offers a fakes API for testing.\n */\nexport class DriveManager<Services extends Record<string, () => DriverContract>> {\n  /**\n   * Registered config\n   */\n  #config: DriveManagerOptions<Services>\n\n  /**\n   * A collection of cached service. We re-use disk instances for a\n   * service, since there isn't any need to reconstruct them\n   * everytime.\n   */\n  #cachedServices: Map<keyof Services, Disk> = new Map()\n\n  /**\n   * A collection of fakes created for the services.\n   */\n  #fakes: Map<keyof Services, FakeDisk> = new Map()\n\n  constructor(config: DriveManagerOptions<Services>) {\n    this.#config = config\n    debug('driver manager config %O', config)\n  }\n\n  /**\n   * Returns an instance of a Disk for the given service. By default\n   * use the \"default\" service from config\n   */\n  use<K extends keyof Services>(service?: K): Disk {\n    const serviceToUse = service || this.#config.default\n\n    /**\n     * Return fake when exists\n     */\n    const fake = this.#fakes.get(serviceToUse)\n    if (fake) {\n      debug('returning fake for service %s', serviceToUse)\n      return fake\n    }\n\n    /**\n     * Return from cache\n     */\n    const cachedDisk = this.#cachedServices.get(serviceToUse)\n    if (cachedDisk) {\n      debug('use cached disk instance for service %s', serviceToUse)\n      return cachedDisk\n    }\n\n    /**\n     * Create disk and cache it\n     */\n    const disk = new Disk(this.#config.services[serviceToUse]())\n    debug('creating disk instance for service %s', serviceToUse)\n    this.#cachedServices.set(serviceToUse, disk)\n    return disk\n  }\n\n  /**\n   * Deploy fake for a given service. The \"use\" method for the same service\n   * will now return an instance of the \"FakeDisk\" class and not the\n   * real implementation.\n   */\n  fake<K extends keyof Services>(service?: K): FakeDisk {\n    const serviceToUse = service || this.#config.default\n\n    /**\n     * Ensure fakes config has been defined\n     */\n    if (!this.#config.fakes) {\n      throw new RuntimeException(\n        'Cannot use \"drive.fake\". Make sure to define fakes configuration when creating DriveManager instance'\n      )\n    }\n\n    /**\n     * Remove existing fake\n     */\n    this.restore(serviceToUse)\n    debug('creating fake for service %s', serviceToUse)\n\n    /**\n     * Create new fake\n     */\n    const fake = new FakeDisk(serviceToUse as string, this.#config.fakes)\n    this.#fakes.set(serviceToUse, fake)\n    return fake\n  }\n\n  /**\n   * Restore fake for a given service\n   */\n  restore<K extends keyof Services>(service?: K): void {\n    const serviceToUse = service || this.#config.default\n    const fake = this.#fakes.get(serviceToUse)\n\n    if (fake) {\n      debug('restoring fake for service %s', serviceToUse)\n      fake.clear()\n      this.#fakes.delete(serviceToUse)\n    }\n  }\n}\n","/*\n * flydrive\n *\n * (c) FlyDrive\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { debuglog } from 'node:util'\n\nexport default debuglog('flydrive:core')\n","/*\n * flydrive\n *\n * (c) FlyDrive\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { join } from 'node:path'\nimport { AssertionError } from 'node:assert'\n\nimport { Disk } from './disk.js'\nimport { FSDriver } from '../drivers/fs/driver.js'\nimport type { DriveManagerOptions } from './types.js'\n\n/**\n * FakeDisk extends the Disk class with additional capabilities to\n * write assertions.\n */\nexport class FakeDisk extends Disk {\n  declare driver: FSDriver\n\n  constructor(\n    public disk: string,\n    fakesConfig: Exclude<DriveManagerOptions<any>['fakes'], undefined>\n  ) {\n    super(\n      new FSDriver({\n        location:\n          typeof fakesConfig.location === 'string'\n            ? join(fakesConfig.location, disk)\n            : new URL(disk, fakesConfig.location),\n        visibility: 'public',\n        urlBuilder: fakesConfig.urlBuilder,\n      })\n    )\n  }\n\n  /**\n   * Assert the expected file(s) exists. Otherwise an assertion\n   * error is thrown\n   */\n  assertExists(paths: string | string[]) {\n    const pathsToVerify = Array.isArray(paths) ? paths : [paths]\n    for (let filePath of pathsToVerify) {\n      if (!this.driver.existsSync(filePath)) {\n        throw new AssertionError({\n          message: `Expected \"${filePath}\" to exist, but file not found.`,\n        })\n      }\n    }\n  }\n\n  /**\n   * Assert the expected file(s) to not exist. Otherwise an assertion\n   * error is thrown\n   */\n  assertMissing(paths: string | string[]) {\n    const pathsToVerify = Array.isArray(paths) ? paths : [paths]\n    for (let filePath of pathsToVerify) {\n      if (this.driver.existsSync(filePath)) {\n        throw new AssertionError({\n          message: `Expected \"${filePath}\" to be missing, but file exists`,\n        })\n      }\n    }\n  }\n\n  /**\n   * Clear storage\n   */\n  clear() {\n    this.driver.clearSync()\n  }\n}\n"],"mappings":"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","names":[]}