{"version":3,"sources":["../src/errors.ts","../src/key_normalizer.ts","../src/driver_file.ts","../src/drive_directory.ts"],"sourcesContent":["/*\n * flydrive\n *\n * (c) FlyDrive\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { createError } from '@poppinss/utils'\n\n/**\n * Unable to write file to the destination\n */\nexport const E_CANNOT_WRITE_FILE = createError<[key: string]>(\n  'Cannot write file at location \"%s\"',\n  'E_CANNOT_WRITE_FILE'\n)\n\n/**\n * Unable to read file\n */\nexport const E_CANNOT_READ_FILE = createError<[key: string]>(\n  'Cannot read file from location \"%s\"',\n  'E_CANNOT_READ_FILE'\n)\n\n/**\n * Unable to delete file\n */\nexport const E_CANNOT_DELETE_FILE = createError<[key: string]>(\n  'Cannot delete file at location \"%s\"',\n  'E_CANNOT_DELETE_FILE'\n)\n\n/**\n * Unable to delete directory\n */\nexport const E_CANNOT_DELETE_DIRECTORY = createError<[key: string]>(\n  'Cannot delete directory at location \"%s\"',\n  'E_CANNOT_DELETE_DIRECTORY'\n)\n\n/**\n * Unable to copy file\n */\nexport const E_CANNOT_COPY_FILE = createError<[source: string, destination: string]>(\n  'Cannot copy file from \"%s\" to \"%s\"',\n  'E_CANNOT_COPY_FILE'\n)\n\n/**\n * Unable to move file\n */\nexport const E_CANNOT_MOVE_FILE = createError<[source: string, destination: string]>(\n  'Cannot move file from \"%s\" to \"%s\"',\n  'E_CANNOT_MOVE_FILE'\n)\n\n/**\n * Unable to check the location of the file\n */\nexport const E_CANNOT_CHECK_FILE_EXISTENCE = createError<[key: string]>(\n  'Unable to check existence for file at location \"%s\"',\n  'E_CANNOT_CHECK_FILE_EXISTENCE'\n)\n\n/**\n * Unable to get file metadata\n */\nexport const E_CANNOT_GET_METADATA = createError<[key: string]>(\n  'Unable to retrieve metadata of file at location \"%s\"',\n  'E_CANNOT_GET_METADATA'\n)\n\n/**\n * Unable to set file visibility\n */\nexport const E_CANNOT_SET_VISIBILITY = createError<[key: string]>(\n  'Unable to set visibility for file at location \"%s\"',\n  'E_CANNOT_SET_VISIBILITY'\n)\n\n/**\n * Unable to generate URL for a file\n */\nexport const E_CANNOT_GENERATE_URL = createError<[key: string]>(\n  'Cannot generate URL for file at location \"%s\"',\n  'E_CANNOT_GENERATE_URL'\n)\n\n/**\n * The file key has unallowed set of characters\n */\nexport const E_UNALLOWED_CHARACTERS = createError<[key: string]>(\n  'The key \"%s\" has unallowed characters',\n  'E_UNALLOWED_CHARACTERS'\n)\n\n/**\n * Key post normalization leads to an empty string\n */\nexport const E_INVALID_KEY = createError<[key: string]>(\n  'Invalid key \"%s\". After normalization results in an empty string',\n  'E_INVALID_KEY'\n)\n\n/**\n * The file key has unallowed set of characters\n */\nexport const E_PATH_TRAVERSAL_DETECTED = createError<[key: string]>(\n  'Path traversal segment detected in key \"%s\"',\n  'E_PATH_TRAVERSAL_DETECTED'\n)\n","/*\n * flydrive\n *\n * (c) FlyDrive\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { slash } from '@poppinss/utils'\nimport { normalize } from 'node:path/posix'\nimport string from '@poppinss/utils/string'\n\nimport * as errors from './errors.js'\n\n/**\n * Key normalizer normalizes the key for writing and reading files. It\n * removes unsafe characters from a string that are either not allowed\n * by cloud providers, or can conflict with a URL.\n *\n * The keys are also scanned and protected from path traversal.\n */\nexport class KeyNormalizer {\n  /**\n   * The set of allowed characters. Key free to re-assign a new\n   * value\n   */\n  static allowedCharacterSet = /^[A-Za-z0-9-_!\\/\\.\\s]*$/\n\n  /**\n   * Normalizes the key by condensing whitespaces, using unix\n   * slashes, and replacing consecutive slashes with one\n   * slash (\"/\").\n   */\n  #preNormalize(key: string): string {\n    /**\n     * Condense whitespaces into one\n     */\n    let normalizedKey = string.condenseWhitespace(key)\n\n    /**\n     * - Normalize slashes to unix style\n     * - Remove consecutive '/'\n     * - Remove more than two dots + slash \"..../\" to \"../\"\n     */\n    return slash(normalizedKey)\n      .replace(/\\/{2,}/g, '/')\n      .replace(/\\.{3,}\\//g, '../')\n  }\n\n  /**\n   * Validates the key to check for unallowed characters\n   */\n  #validateCharacterSet(key: string, originalKey: string) {\n    if (!KeyNormalizer.allowedCharacterSet.test(key)) {\n      throw new errors.E_UNALLOWED_CHARACTERS([originalKey])\n    }\n  }\n\n  /**\n   * Checks for path traversel in key\n   */\n  #checkForPathTraversal(key: string, originalKey: string) {\n    const tokens = key.split('/')\n    for (let token of tokens) {\n      if (token === '..') {\n        throw new errors.E_PATH_TRAVERSAL_DETECTED([originalKey])\n      }\n    }\n  }\n\n  /**\n   * Further normalizing the key after validating it. Here we remove\n   * starting and ending path expressions like \".\" and \"/\" from\n   * the key.\n   */\n  #postNormalize(key: string) {\n    /**\n     * Normalize key by removing consecutive path expressions. For example\n     *\n     * - \"dir/.\" will convert to \"dir\"\n     * - \"dir/./\" will convert to \"dir/\"\n     *\n     * Note\n     * Do not call this method before validating for path traversal\n     */\n    let normalizedKey = normalize(key)\n\n    /**\n     * Remove leading and ending '/'\n     * Remove leading and ending \".\"\n     */\n    return normalizedKey.replace(/^\\/|\\/$/g, '').replace(/^\\.|\\.$/g, '')\n  }\n\n  /**\n   * Normalize the key\n   */\n  normalize(key: string) {\n    let normalizedKey = this.#preNormalize(key)\n\n    /**\n     * Validating the key after pre-processing it with\n     * some rules\n     */\n    this.#validateCharacterSet(normalizedKey, key)\n    this.#checkForPathTraversal(normalizedKey, key)\n\n    /**\n     * Performing post normalization after the key passes\n     * the validations\n     */\n    normalizedKey = this.#postNormalize(normalizedKey)\n\n    /**\n     * Post normalization sometimes can lead to an empty string\n     */\n    if (normalizedKey.trim() === '') {\n      throw new errors.E_INVALID_KEY([key])\n    }\n\n    return normalizedKey\n  }\n}\n","/*\n * flydrive\n *\n * (c) FlyDrive\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { basename } from 'node:path'\nimport { Readable } from 'node:stream'\n\nimport * as errors from './errors.js'\nimport { KeyNormalizer } from './key_normalizer.js'\nimport type {\n  DriverContract,\n  FileSnapshot,\n  ObjectMetaData,\n  ObjectVisibility,\n  SignedURLOptions,\n} from './types.js'\n\n/**\n * DriveFile is a pointer to a given object. It can be used to lazily\n * read the file contents and metadata and also you may convert it\n * to a snapshot and persist it inside the database.\n */\nexport class DriveFile {\n  /**\n   * The driver to use for performing read-only operations\n   */\n  #driver: DriverContract\n\n  /**\n   * Known metadata from the snapshot or from the files listing\n   * API\n   */\n  #metaData?: ObjectMetaData\n\n  /**\n   * The normalizer is used to normalize and validate keys\n   */\n  #normalizer = new KeyNormalizer()\n\n  /**\n   * Reference to the normalized file key\n   */\n  key: string\n\n  /**\n   * The basename of the file. Extracted from the key\n   */\n  name: string\n\n  /**\n   * Flags to know if the object is a file or a directory\n   */\n  isFile: true = true\n  isDirectory: false = false\n\n  constructor(key: string, driver: DriverContract, metaData?: ObjectMetaData) {\n    this.#driver = driver\n    this.#metaData = metaData\n    this.key = this.#normalizer.normalize(key)\n    this.name = basename(this.key)\n  }\n\n  /**\n   * Check if the file exists. This method cannot check existence\n   * of directories.\n   */\n  async exists() {\n    try {\n      return await this.#driver.exists(this.key)\n    } catch (error) {\n      throw new errors.E_CANNOT_CHECK_FILE_EXISTENCE([this.key], { cause: error })\n    }\n  }\n\n  /**\n   * Returns file contents as a UTF-8 string. Use \"getArrayBuffer\" method\n   * if you need more control over the file contents decoding.\n   */\n  async get(): Promise<string> {\n    try {\n      return await this.#driver.get(this.key)\n    } catch (error) {\n      throw new errors.E_CANNOT_READ_FILE([this.key], { cause: error })\n    }\n  }\n\n  /**\n   * Returns file contents as a Readable stream.\n   */\n  async getStream(): Promise<Readable> {\n    try {\n      return await this.#driver.getStream(this.key)\n    } catch (error) {\n      throw new errors.E_CANNOT_READ_FILE([this.key], { cause: error })\n    }\n  }\n\n  /**\n   * Returns file contents as a Uint8Array.\n   */\n  async getBytes(): Promise<Uint8Array> {\n    try {\n      return await this.#driver.getBytes(this.key)\n    } catch (error) {\n      throw new errors.E_CANNOT_READ_FILE([this.key], { cause: error })\n    }\n  }\n\n  /**\n   * @deprecated\n   * @see {@link DriveFile.getBytes}\n   */\n  async getArrayBuffer(): Promise<Uint8Array> {\n    process.emitWarning(\n      'getArrayBuffer() method has been deprecated. Instead use \"getBytes\"',\n      'DeprecationWarning'\n    )\n    return this.getBytes()\n  }\n\n  /**\n   * Returns metadata of the given file.\n   */\n  async getMetaData(): Promise<ObjectMetaData> {\n    if (this.#metaData) {\n      return this.#metaData\n    }\n\n    try {\n      return await this.#driver.getMetaData(this.key)\n    } catch (error) {\n      throw new errors.E_CANNOT_GET_METADATA([this.key], { cause: error })\n    }\n  }\n\n  /**\n   * Returns the visibility of the file\n   */\n  async getVisibility(): Promise<ObjectVisibility> {\n    try {\n      return await this.#driver.getVisibility(this.key)\n    } catch (error) {\n      throw new errors.E_CANNOT_GET_METADATA([this.key], { cause: error })\n    }\n  }\n\n  /**\n   * Returns the public URL of the file\n   */\n  async getUrl() {\n    try {\n      return await this.#driver.getUrl(this.key)\n    } catch (error) {\n      throw new errors.E_CANNOT_GENERATE_URL([this.key], { cause: error })\n    }\n  }\n\n  /**\n   * Returns a signed/temporary URL of the file\n   */\n  async getSignedUrl(options?: SignedURLOptions) {\n    try {\n      return await this.#driver.getSignedUrl(this.key, options)\n    } catch (error) {\n      throw new errors.E_CANNOT_GENERATE_URL([this.key], { cause: error })\n    }\n  }\n\n  /**\n   * Returns a snapshot of the file. The snapshot could be persisted\n   * within any database storage and later you can create a file\n   * instance from it using the \"disk.fromSnapshot\" method.\n   */\n  async toSnapshot(): Promise<FileSnapshot> {\n    const metaData = await this.getMetaData()\n\n    return {\n      key: this.key,\n      name: this.name,\n      contentLength: metaData.contentLength,\n      lastModified: metaData.lastModified.toString(),\n      etag: metaData.etag,\n      contentType: metaData.contentType,\n    }\n  }\n}\n","/*\n * flydrive\n *\n * (c) FlyDrive\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { basename } from 'node:path'\n\n/**\n * Representation of a directory in the listing\n * of objects.\n */\nexport class DriveDirectory {\n  isFile: false = false\n  isDirectory: true = true\n  name: string\n  constructor(public prefix: string) {\n    this.name = basename(this.prefix)\n  }\n}\n"],"mappings":";;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA,SAAS,mBAAmB;AAKrB,IAAM,sBAAsB;AAAA,EACjC;AAAA,EACA;AACF;AAKO,IAAM,qBAAqB;AAAA,EAChC;AAAA,EACA;AACF;AAKO,IAAM,uBAAuB;AAAA,EAClC;AAAA,EACA;AACF;AAKO,IAAM,4BAA4B;AAAA,EACvC;AAAA,EACA;AACF;AAKO,IAAM,qBAAqB;AAAA,EAChC;AAAA,EACA;AACF;AAKO,IAAM,qBAAqB;AAAA,EAChC;AAAA,EACA;AACF;AAKO,IAAM,gCAAgC;AAAA,EAC3C;AAAA,EACA;AACF;AAKO,IAAM,wBAAwB;AAAA,EACnC;AAAA,EACA;AACF;AAKO,IAAM,0BAA0B;AAAA,EACrC;AAAA,EACA;AACF;AAKO,IAAM,wBAAwB;AAAA,EACnC;AAAA,EACA;AACF;AAKO,IAAM,yBAAyB;AAAA,EACpC;AAAA,EACA;AACF;AAKO,IAAM,gBAAgB;AAAA,EAC3B;AAAA,EACA;AACF;AAKO,IAAM,4BAA4B;AAAA,EACvC;AAAA,EACA;AACF;;;ACxGA,SAAS,aAAa;AACtB,SAAS,iBAAiB;AAC1B,OAAO,YAAY;AAWZ,IAAM,gBAAN,MAAM,eAAc;AAAA;AAAA;AAAA;AAAA;AAAA,EAKzB,OAAO,sBAAsB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAO7B,cAAc,KAAqB;AAIjC,QAAI,gBAAgB,OAAO,mBAAmB,GAAG;AAOjD,WAAO,MAAM,aAAa,EACvB,QAAQ,WAAW,GAAG,EACtB,QAAQ,aAAa,KAAK;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA,EAKA,sBAAsB,KAAa,aAAqB;AACtD,QAAI,CAAC,eAAc,oBAAoB,KAAK,GAAG,GAAG;AAChD,YAAM,IAAW,uBAAuB,CAAC,WAAW,CAAC;AAAA,IACvD;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,uBAAuB,KAAa,aAAqB;AACvD,UAAM,SAAS,IAAI,MAAM,GAAG;AAC5B,aAAS,SAAS,QAAQ;AACxB,UAAI,UAAU,MAAM;AAClB,cAAM,IAAW,0BAA0B,CAAC,WAAW,CAAC;AAAA,MAC1D;AAAA,IACF;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,eAAe,KAAa;AAU1B,QAAI,gBAAgB,UAAU,GAAG;AAMjC,WAAO,cAAc,QAAQ,YAAY,EAAE,EAAE,QAAQ,YAAY,EAAE;AAAA,EACrE;AAAA;AAAA;AAAA;AAAA,EAKA,UAAU,KAAa;AACrB,QAAI,gBAAgB,KAAK,cAAc,GAAG;AAM1C,SAAK,sBAAsB,eAAe,GAAG;AAC7C,SAAK,uBAAuB,eAAe,GAAG;AAM9C,oBAAgB,KAAK,eAAe,aAAa;AAKjD,QAAI,cAAc,KAAK,MAAM,IAAI;AAC/B,YAAM,IAAW,cAAc,CAAC,GAAG,CAAC;AAAA,IACtC;AAEA,WAAO;AAAA,EACT;AACF;;;AClHA,SAAS,gBAAgB;AAkBlB,IAAM,YAAN,MAAgB;AAAA;AAAA;AAAA;AAAA,EAIrB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA;AAAA;AAAA;AAAA;AAAA,EAKA,cAAc,IAAI,cAAc;AAAA;AAAA;AAAA;AAAA,EAKhC;AAAA;AAAA;AAAA;AAAA,EAKA;AAAA;AAAA;AAAA;AAAA,EAKA,SAAe;AAAA,EACf,cAAqB;AAAA,EAErB,YAAY,KAAa,QAAwB,UAA2B;AAC1E,SAAK,UAAU;AACf,SAAK,YAAY;AACjB,SAAK,MAAM,KAAK,YAAY,UAAU,GAAG;AACzC,SAAK,OAAO,SAAS,KAAK,GAAG;AAAA,EAC/B;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,SAAS;AACb,QAAI;AACF,aAAO,MAAM,KAAK,QAAQ,OAAO,KAAK,GAAG;AAAA,IAC3C,SAAS,OAAO;AACd,YAAM,IAAW,8BAA8B,CAAC,KAAK,GAAG,GAAG,EAAE,OAAO,MAAM,CAAC;AAAA,IAC7E;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,MAAuB;AAC3B,QAAI;AACF,aAAO,MAAM,KAAK,QAAQ,IAAI,KAAK,GAAG;AAAA,IACxC,SAAS,OAAO;AACd,YAAM,IAAW,mBAAmB,CAAC,KAAK,GAAG,GAAG,EAAE,OAAO,MAAM,CAAC;AAAA,IAClE;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,YAA+B;AACnC,QAAI;AACF,aAAO,MAAM,KAAK,QAAQ,UAAU,KAAK,GAAG;AAAA,IAC9C,SAAS,OAAO;AACd,YAAM,IAAW,mBAAmB,CAAC,KAAK,GAAG,GAAG,EAAE,OAAO,MAAM,CAAC;AAAA,IAClE;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,WAAgC;AACpC,QAAI;AACF,aAAO,MAAM,KAAK,QAAQ,SAAS,KAAK,GAAG;AAAA,IAC7C,SAAS,OAAO;AACd,YAAM,IAAW,mBAAmB,CAAC,KAAK,GAAG,GAAG,EAAE,OAAO,MAAM,CAAC;AAAA,IAClE;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAM,iBAAsC;AAC1C,YAAQ;AAAA,MACN;AAAA,MACA;AAAA,IACF;AACA,WAAO,KAAK,SAAS;AAAA,EACvB;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,cAAuC;AAC3C,QAAI,KAAK,WAAW;AAClB,aAAO,KAAK;AAAA,IACd;AAEA,QAAI;AACF,aAAO,MAAM,KAAK,QAAQ,YAAY,KAAK,GAAG;AAAA,IAChD,SAAS,OAAO;AACd,YAAM,IAAW,sBAAsB,CAAC,KAAK,GAAG,GAAG,EAAE,OAAO,MAAM,CAAC;AAAA,IACrE;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,gBAA2C;AAC/C,QAAI;AACF,aAAO,MAAM,KAAK,QAAQ,cAAc,KAAK,GAAG;AAAA,IAClD,SAAS,OAAO;AACd,YAAM,IAAW,sBAAsB,CAAC,KAAK,GAAG,GAAG,EAAE,OAAO,MAAM,CAAC;AAAA,IACrE;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,SAAS;AACb,QAAI;AACF,aAAO,MAAM,KAAK,QAAQ,OAAO,KAAK,GAAG;AAAA,IAC3C,SAAS,OAAO;AACd,YAAM,IAAW,sBAAsB,CAAC,KAAK,GAAG,GAAG,EAAE,OAAO,MAAM,CAAC;AAAA,IACrE;AAAA,EACF;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,aAAa,SAA4B;AAC7C,QAAI;AACF,aAAO,MAAM,KAAK,QAAQ,aAAa,KAAK,KAAK,OAAO;AAAA,IAC1D,SAAS,OAAO;AACd,YAAM,IAAW,sBAAsB,CAAC,KAAK,GAAG,GAAG,EAAE,OAAO,MAAM,CAAC;AAAA,IACrE;AAAA,EACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,aAAoC;AACxC,UAAM,WAAW,MAAM,KAAK,YAAY;AAExC,WAAO;AAAA,MACL,KAAK,KAAK;AAAA,MACV,MAAM,KAAK;AAAA,MACX,eAAe,SAAS;AAAA,MACxB,cAAc,SAAS,aAAa,SAAS;AAAA,MAC7C,MAAM,SAAS;AAAA,MACf,aAAa,SAAS;AAAA,IACxB;AAAA,EACF;AACF;;;ACrLA,SAAS,YAAAA,iBAAgB;AAMlB,IAAM,iBAAN,MAAqB;AAAA,EAI1B,YAAmB,QAAgB;AAAhB;AACjB,SAAK,OAAOA,UAAS,KAAK,MAAM;AAAA,EAClC;AAAA,EALA,SAAgB;AAAA,EAChB,cAAoB;AAAA,EACpB;AAIF;","names":["basename"]}