{"version":3,"sources":["../index.ts","../configure.ts","../stubs/main.ts","../src/define_config.ts","../src/url_builder.ts"],"sourcesContent":["/*\n * @adonisjs/drive\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nexport * from 'flydrive'\nexport * as errors from './src/errors.js'\nexport { configure } from './configure.js'\nexport { stubsRoot } from './stubs/main.js'\nexport { defineConfig, services } from './src/define_config.js'\n","/*\n * @adonisjs/drive\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport string from '@adonisjs/core/helpers/string'\nimport ConfigureCommand from '@adonisjs/core/commands/configure'\nimport { stubsRoot } from './stubs/main.js'\n\n/**\n * List of available storage services\n */\nconst STORAGE_SERVICES = {\n  fs: {\n    name: 'Local filesystem',\n    env: [],\n    dependencies: [],\n  },\n  s3: {\n    name: 'AWS S3',\n    env: [\n      { name: 'AWS_ACCESS_KEY_ID', value: '', schema: 'Env.schema.string()' },\n      { name: 'AWS_SECRET_ACCESS_KEY', value: '', schema: 'Env.schema.string()' },\n      { name: 'AWS_REGION', value: '', schema: 'Env.schema.string()' },\n      { name: 'S3_BUCKET', value: '', schema: 'Env.schema.string()' },\n    ],\n    dependencies: ['@aws-sdk/client-s3', '@aws-sdk/s3-request-presigner'],\n  },\n  spaces: {\n    name: 'Digital Ocean Spaces',\n    env: [\n      { name: 'SPACES_KEY', value: '', schema: 'Env.schema.string()' },\n      { name: 'SPACES_SECRET', value: '', schema: 'Env.schema.string()' },\n      { name: 'SPACES_REGION', value: '', schema: 'Env.schema.string()' },\n      { name: 'SPACES_BUCKET', value: '', schema: 'Env.schema.string()' },\n      {\n        name: 'SPACES_ENDPOINT',\n        value: `https://\\${SPACES_REGION}.digitaloceanspaces.com`,\n        schema: 'Env.schema.string()',\n      },\n    ],\n    dependencies: ['@aws-sdk/client-s3', '@aws-sdk/s3-request-presigner'],\n  },\n  r2: {\n    name: 'Cloudflare R2',\n    env: [\n      { name: 'R2_KEY', value: '', schema: 'Env.schema.string()' },\n      { name: 'R2_SECRET', value: '', schema: 'Env.schema.string()' },\n      { name: 'R2_BUCKET', value: '', schema: 'Env.schema.string()' },\n      { name: 'R2_ENDPOINT', value: '', schema: 'Env.schema.string()' },\n    ],\n    dependencies: ['@aws-sdk/client-s3', '@aws-sdk/s3-request-presigner'],\n  },\n  gcs: {\n    name: 'Google Cloud Storage',\n    env: [\n      { name: 'GCS_KEY', value: 'file://./gcs_key.json', schema: 'Env.schema.string()' },\n      { name: 'GCS_BUCKET', value: '', schema: 'Env.schema.string()' },\n    ],\n    dependencies: ['@google-cloud/storage'],\n  },\n}\n\n/**\n * List of known services\n */\nconst SERVICES_NAMES = Object.keys(STORAGE_SERVICES) as (keyof typeof STORAGE_SERVICES)[]\n\nexport async function configure(command: ConfigureCommand) {\n  /**\n   * Read services from the \"--services\" CLI flag\n   */\n  let selectedServices:\n    | keyof typeof STORAGE_SERVICES\n    | (keyof typeof STORAGE_SERVICES)[]\n    | undefined = command.parsedFlags.services\n\n  /**\n   * Should dependencies be installed\n   */\n  let shouldInstallPackages: boolean | undefined = command.parsedFlags.install\n\n  /**\n   * Display prompt when no services are specified\n   * via the CLI flag.\n   */\n  if (!selectedServices) {\n    selectedServices = await command.prompt.multiple(\n      'Select the storage services you want to use',\n      SERVICES_NAMES.map((service) => {\n        return {\n          name: service,\n          message: STORAGE_SERVICES[service].name,\n        }\n      }),\n      {\n        validate(values) {\n          return !values || !values.length ? 'Please select one or more services' : true\n        },\n      }\n    )\n  }\n\n  /**\n   * Normalized list of services\n   */\n  const services = typeof selectedServices === 'string' ? [selectedServices] : selectedServices!\n\n  const unknownServices = services.find((service) => !SERVICES_NAMES.includes(service))\n  if (unknownServices) {\n    command.exitCode = 1\n    command.logger.logError(\n      `Invalid service \"${unknownServices}\". Supported services are: ${string.sentence(\n        SERVICES_NAMES\n      )}`\n    )\n    return\n  }\n\n  /**\n   * Create a flat collection of dependencies to install\n   * based upon the configured services.\n   */\n  const pkgsToInstall = services\n    .flatMap((service) => STORAGE_SERVICES[service].dependencies)\n    .map((pkg) => {\n      return { name: pkg, isDevDependency: false }\n    })\n\n  /**\n   * Prompt to install additional services\n   */\n  if (!shouldInstallPackages && pkgsToInstall.length) {\n    shouldInstallPackages = await command.prompt.confirm(\n      'Do you want to install additional packages required by \"@adonisjs/drive\"?'\n    )\n  }\n\n  const codemods = await command.createCodemods()\n\n  /**\n   * Publish config file\n   */\n  await codemods.makeUsingStub(stubsRoot, 'config/drive.stub', {\n    services,\n  })\n\n  /**\n   * Publish provider\n   */\n  await codemods.updateRcFile((rcFile) => {\n    rcFile.addProvider('@adonisjs/drive/drive_provider')\n  })\n\n  /**\n   * Define env variables for the selected services\n   */\n  await codemods.defineEnvVariables(\n    services.reduce<Record<string, string>>(\n      (result, service) => {\n        STORAGE_SERVICES[service].env.forEach((envVariable) => {\n          result[envVariable.name] = envVariable.value\n        })\n        return result\n      },\n      {\n        DRIVE_DISK: services[0],\n      }\n    )\n  )\n\n  /**\n   * Define env variables validation for the selected services\n   */\n  await codemods.defineEnvValidations({\n    leadingComment: 'Variables for configuring the drive package',\n    variables: services.reduce<Record<string, string>>(\n      (result, service) => {\n        STORAGE_SERVICES[service].env.forEach((envVariable) => {\n          result[envVariable.name] = envVariable.schema\n        })\n        return result\n      },\n      {\n        DRIVE_DISK: `Env.schema.enum(['${services.join(\"', '\")}'] as const)`,\n      }\n    ),\n  })\n\n  if (!pkgsToInstall.length) {\n    return\n  }\n\n  if (shouldInstallPackages) {\n    await codemods.installPackages(pkgsToInstall)\n  } else {\n    await codemods.listPackagesToInstall(pkgsToInstall)\n  }\n}\n","import { dirname } from 'node:path'\nimport { fileURLToPath } from 'node:url'\n\n/**\n * Path to the root directory where the stubs are stored. We use\n * this path within commands and the configure hook\n */\nexport const stubsRoot = dirname(fileURLToPath(import.meta.url))\n","/*\n * @adonisjs/drive\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { configProvider } from '@adonisjs/core'\nimport type { ConfigProvider } from '@adonisjs/core/types'\nimport { RuntimeException } from '@adonisjs/core/exceptions'\n\nimport type { S3Driver } from 'flydrive/drivers/s3'\nimport type { FSDriver } from 'flydrive/drivers/fs'\nimport type { GCSDriver } from 'flydrive/drivers/gcs'\nimport type { FSDriverOptions } from 'flydrive/drivers/fs/types'\nimport type { S3DriverOptions } from 'flydrive/drivers/s3/types'\nimport type { GCSDriverOptions } from 'flydrive/drivers/gcs/types'\n\nimport { createURLBuilder } from './url_builder.js'\nimport type {\n  DriverFactory,\n  AdonisFSDriverOptions,\n  ServiceConfigProvider,\n  ServiceWithLocalServer,\n  DriveManagerOptions,\n} from './types.js'\nimport debug from './debug.js'\n\n/**\n * Helper to remap known drive services to factory functions\n */\ntype ResolvedConfig<Services extends Record<string, DriverFactory>> = {\n  config: {\n    default: keyof Services\n    fakes: DriveManagerOptions<Services>['fakes']\n    services: {\n      [K in keyof Services]: Services[K] extends ServiceConfigProvider<infer A> ? A : Services[K]\n    }\n  }\n  locallyServed: ServiceWithLocalServer[]\n}\n\n/**\n * Helper function to define configuration for FlyDrive\n */\nexport function defineConfig<Services extends Record<string, DriverFactory>>(config: {\n  default: keyof Services\n  fakes?: DriveManagerOptions<Services>['fakes']\n  services: {\n    [K in keyof Services]: ServiceConfigProvider<Services[K]> | Services[K]\n  }\n}): ConfigProvider<ResolvedConfig<Services>> {\n  return configProvider.create(async (app) => {\n    const { services, fakes, default: defaultDisk } = config\n    const servicesNames = Object.keys(services)\n\n    /**\n     * Configured disks\n     */\n    const disks = {} as Record<string, DriverFactory>\n\n    /**\n     * A collection of services with their routes that must\n     * be served locally using the AdonisJS HTTP server.\n     */\n    const locallyServed: ServiceWithLocalServer[] = []\n\n    /**\n     * Looping over services and resolving their config providers\n     * to get factory functions\n     */\n    for (let serviceName of servicesNames) {\n      const disk = services[serviceName]\n      if (typeof disk === 'function') {\n        disks[serviceName] = disk\n      } else {\n        disks[serviceName] = await disk.resolver(serviceName, app, locallyServed)\n      }\n    }\n\n    return {\n      config: {\n        default: defaultDisk,\n        fakes: {\n          location: app.tmpPath('drive-fakes'),\n          urlBuilder: {\n            async generateURL(key, _) {\n              return `/drive/fakes/${key}`\n            },\n            async generateSignedURL(key, _, __) {\n              return `/drive/fakes/signed/${key}`\n            },\n          },\n          ...fakes,\n        },\n        services: disks,\n      },\n      locallyServed,\n    } as ResolvedConfig<Services>\n  })\n}\n\n/**\n * Config helpers to register file storage services within the\n * config file.\n */\nexport const services: {\n  /**\n   * Configure the \"fs\" driver to store files on the\n   * local filesystem and serve files using the\n   * AdonisJS HTTP server\n   */\n  fs: (config: AdonisFSDriverOptions) => ServiceConfigProvider<() => FSDriver>\n\n  /**\n   * Configure the \"s3\" driver to store files inside\n   * a S3 bucket and serve files using S3 directly\n   * or a CDN.\n   */\n  s3: (config: S3DriverOptions) => ServiceConfigProvider<() => S3Driver>\n\n  /**\n   * Configure the \"gcs\" driver to store files inside\n   * a GCS bucket and serve files using GCS directly.\n   */\n  gcs: (config: GCSDriverOptions) => ServiceConfigProvider<() => GCSDriver>\n} = {\n  fs(config) {\n    return {\n      type: 'provider',\n      async resolver(name, app, locallyServed) {\n        debug('configuring fs service')\n\n        /**\n         * Ensure route base path is provided when serving files\n         */\n        if (config.serveFiles && !config.routeBasePath) {\n          throw new RuntimeException(\n            `Invalid drive config. Missing \"routeBasePath\" option in \"services.${name}\" object`\n          )\n        }\n\n        const routeName = `drive.${name}.serve`\n        const fsConfig: FSDriverOptions = {\n          visibility: config.visibility,\n          location: config.location,\n        }\n\n        /**\n         * Assign URL builder when serving files.\n         */\n        if (config.serveFiles) {\n          const router = await app.container.make('router')\n          fsConfig.urlBuilder = createURLBuilder(router, config, routeName)\n          locallyServed.push({\n            service: name,\n            routeName,\n            routePattern: `${config.routeBasePath.replace(/\\/$/, '')}/*`,\n          })\n        }\n\n        const { FSDriver } = await import('flydrive/drivers/fs')\n        return () => new FSDriver(fsConfig)\n      },\n    }\n  },\n  s3(config) {\n    return {\n      type: 'provider',\n      async resolver() {\n        debug('configuring s3 service')\n        const { S3Driver } = await import('flydrive/drivers/s3')\n        return () => new S3Driver(config)\n      },\n    }\n  },\n  gcs(config) {\n    return {\n      type: 'provider',\n      async resolver() {\n        debug('configuring gcs service')\n        const { GCSDriver } = await import('flydrive/drivers/gcs')\n        return () => new GCSDriver(config)\n      },\n    }\n  },\n}\n","/*\n * @adonisjs/drive\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport type { Router } from '@adonisjs/core/http'\nimport type { AdonisFSDriverOptions } from './types.js'\nimport type { FSDriverOptions } from 'flydrive/drivers/fs/types'\n\n/**\n * Creates the URL builder for the flydrive \"fs\" driver.\n */\nexport function createURLBuilder(\n  router: Router,\n  config: AdonisFSDriverOptions,\n  routeName: string\n): Exclude<Required<FSDriverOptions['urlBuilder']>, undefined> {\n  const prefixUrl = config.appUrl || ''\n\n  return {\n    async generateURL(key) {\n      return router\n        .builder()\n        .params({ '*': key.split('/') })\n        .prefixUrl(prefixUrl)\n        .make(routeName)\n    },\n    async generateSignedURL(key, _, options) {\n      const { expiresIn, ...headers } = options\n      return router\n        .builder()\n        .qs(headers)\n        .params({ '*': key.split('/') })\n        .prefixUrl(prefixUrl)\n        .makeSigned(routeName, {\n          expiresIn,\n        })\n    },\n  }\n}\n"],"mappings":"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","names":["services","services"]}