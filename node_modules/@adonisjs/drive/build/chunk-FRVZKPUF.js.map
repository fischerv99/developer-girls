{"version":3,"sources":["../src/errors.ts","../src/debug.ts"],"sourcesContent":["/*\n * @adonisjs/core\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { HttpContext } from '@adonisjs/core/http'\nimport { Exception } from '@adonisjs/core/exceptions'\n\n/**\n * The exception is raised by the local file server when\n * trying to serve a file during an HTTP request.\n */\nexport class CannotServeFileException extends Exception {\n  debug = process.env.NODE_ENV !== 'production'\n\n  constructor(originalError: any) {\n    super('Cannot serve local file using drive', {\n      code: 'E_CANNOT_SERVE_FILE',\n      status: 500,\n      cause: originalError,\n    })\n  }\n\n  /**\n   * Returns the root cause of the error by reading\n   * the nested \"error.cause\" property in recursive\n   * manner.\n   */\n  #getRootCause(error: unknown): any {\n    if (error && typeof error === 'object' && 'cause' in error) {\n      return this.#getRootCause(error.cause)\n    }\n    return error\n  }\n\n  /**\n   * Parses the original error to find the accurate error\n   * message, stack and the status code.\n   */\n  parseError(error: this) {\n    const rootCause = this.#getRootCause(error)\n    const message = rootCause.message || error.message\n    const stack = rootCause.stack\n    const code = rootCause.code\n    const status =\n      code === 'ENOENT' || message.includes('Cannot get metadata of a directory') ? 404 : 500\n\n    return { stack, status, message }\n  }\n\n  /**\n   * Converts error to an HTTP response.\n   */\n  handle(error: this, ctx: HttpContext) {\n    /**\n     * In non-debug mode (aka production) we explicitly\n     * respond with a 404 response and a generic\n     * message.\n     */\n    if (!this.debug) {\n      return ctx.response.status(404).send('File not found')\n    }\n\n    let { stack, status, message } = this.parseError(error)\n    return ctx.response.status(status).send(`${message}${stack ? `\\nStack:${stack}` : ''}`)\n  }\n\n  /**\n   * Reporting the error using the logger\n   */\n  report(error: this, ctx: HttpContext) {\n    /**\n     * Displaying error during development\n     */\n    const { stack, status, message } = this.parseError(error)\n\n    if (status === 404) {\n      ctx.logger.warn(message)\n    } else {\n      ctx.logger.error({ err: stack }, message)\n    }\n  }\n}\n","/*\n * @adonisjs/drive\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nimport { debuglog } from 'node:util'\n\nexport default debuglog('adonisjs:drive')\n"],"mappings":";;;;;AAAA;AAAA;AAAA;AAAA;AAUA,SAAS,iBAAiB;AAMnB,IAAM,2BAAN,cAAuC,UAAU;AAAA,EACtD,QAAQ,QAAQ,IAAI,aAAa;AAAA,EAEjC,YAAY,eAAoB;AAC9B,UAAM,uCAAuC;AAAA,MAC3C,MAAM;AAAA,MACN,QAAQ;AAAA,MACR,OAAO;AAAA,IACT,CAAC;AAAA,EACH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,cAAc,OAAqB;AACjC,QAAI,SAAS,OAAO,UAAU,YAAY,WAAW,OAAO;AAC1D,aAAO,KAAK,cAAc,MAAM,KAAK;AAAA,IACvC;AACA,WAAO;AAAA,EACT;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,WAAW,OAAa;AACtB,UAAM,YAAY,KAAK,cAAc,KAAK;AAC1C,UAAM,UAAU,UAAU,WAAW,MAAM;AAC3C,UAAM,QAAQ,UAAU;AACxB,UAAM,OAAO,UAAU;AACvB,UAAM,SACJ,SAAS,YAAY,QAAQ,SAAS,oCAAoC,IAAI,MAAM;AAEtF,WAAO,EAAE,OAAO,QAAQ,QAAQ;AAAA,EAClC;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,OAAa,KAAkB;AAMpC,QAAI,CAAC,KAAK,OAAO;AACf,aAAO,IAAI,SAAS,OAAO,GAAG,EAAE,KAAK,gBAAgB;AAAA,IACvD;AAEA,QAAI,EAAE,OAAO,QAAQ,QAAQ,IAAI,KAAK,WAAW,KAAK;AACtD,WAAO,IAAI,SAAS,OAAO,MAAM,EAAE,KAAK,GAAG,OAAO,GAAG,QAAQ;AAAA,QAAW,KAAK,KAAK,EAAE,EAAE;AAAA,EACxF;AAAA;AAAA;AAAA;AAAA,EAKA,OAAO,OAAa,KAAkB;AAIpC,UAAM,EAAE,OAAO,QAAQ,QAAQ,IAAI,KAAK,WAAW,KAAK;AAExD,QAAI,WAAW,KAAK;AAClB,UAAI,OAAO,KAAK,OAAO;AAAA,IACzB,OAAO;AACL,UAAI,OAAO,MAAM,EAAE,KAAK,MAAM,GAAG,OAAO;AAAA,IAC1C;AAAA,EACF;AACF;;;AC7EA,SAAS,gBAAgB;AAEzB,IAAO,gBAAQ,SAAS,gBAAgB;","names":[]}