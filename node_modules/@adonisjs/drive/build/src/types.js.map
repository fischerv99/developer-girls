{"version":3,"sources":["../../src/types.ts"],"sourcesContent":["/*\n * @adonisjs/drive\n *\n * (c) AdonisJS\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\nexport * from 'flydrive/types'\n\nimport type { DriveManager } from 'flydrive'\nimport type { DriverContract, ObjectVisibility } from 'flydrive/types'\nimport type { ApplicationService, ConfigProvider } from '@adonisjs/core/types'\n\n/**\n * Options accepted by the FSDriver registered by AdonisJS\n * using the config helpers.\n */\nexport type AdonisFSDriverOptions = {\n  /**\n   * Root location of the filesystem. The files will be\n   * read and persisted to this location\n   */\n  location: URL | string\n\n  /**\n   * The default visibility of all the files. The FSDriver\n   * does not use visbility to implement any logic, instead\n   * it returns the value as it is via the \"getMetaData\"\n   * method\n   */\n  visibility: ObjectVisibility\n\n  /**\n   * Application URL that someone enters in the browser\n   * to visit your app. Define the \"appUrl\", if you want\n   * to generate fully qualified URLs using Drive.\n   *\n   * Defaults to undefined\n   */\n  appUrl?: string\n} & (\n  | {\n      /**\n       * Enable the flag if you want drive to register a route\n       * to serve files.\n       *\n       * If you want to self implement the logic for serving\n       * files then you can turn off this setting and register\n       * a route + handler yourself.\n       */\n      serveFiles: true\n\n      /**\n       * Define the route path to be used for serving files. A route\n       * for this path will be registered all the URLs created\n       * via \"drive.getUrl\" and \"drive.getSignedUrl\" will\n       * include this route path.\n       *\n       * The `routeBasePath` must be defined when \"serveFiles\"\n       * has been enabled.\n       */\n      routeBasePath: string\n    }\n  | {\n      serveFiles?: false\n      routeBasePath?: string\n    }\n)\n\n/**\n * Service info that must be served via the AdonisJS\n * local HTTP server\n */\nexport type ServiceWithLocalServer = {\n  service: string\n  routeName: string\n  routePattern: string\n}\n\n/**\n * Representation of a factory function that returns\n * an instance of a driver.\n */\nexport type DriverFactory = () => DriverContract\n\n/**\n * Service config provider is an extension of the config\n * provider and accepts the name of the disk service\n */\nexport type ServiceConfigProvider<Factory extends DriverFactory> = {\n  type: 'provider'\n  resolver: (\n    name: string,\n    app: ApplicationService,\n    locallyServed: ServiceWithLocalServer[]\n  ) => Promise<Factory>\n}\n\n/**\n * A list of disks inferred using the config defined inside\n * the user-land application\n */\nexport interface DriveDisks {}\nexport type InferDriveDisks<\n  T extends ConfigProvider<{ config: { services: Record<string, DriverFactory> } }>,\n> = Awaited<ReturnType<T['resolver']>>['config']['services']\n\n/**\n * Drive service represents a singleton since of the DriveManager\n * configured using the \"config/drive.ts\" file.\n */\nexport interface DriveService\n  extends DriveManager<DriveDisks extends Record<string, DriverFactory> ? DriveDisks : never> {}\n"],"mappings":";AASA,cAAc;","names":[]}